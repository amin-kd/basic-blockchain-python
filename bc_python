import hashlib
import json
import sys
import requests
from time import time
from uuid import uuid4
from urllib.parse import urlparse
from flask import Flask, jsonify, request



class blockchain():
    def __init__(self):
        self.chain = []  # the actual chain of blocks
        self.nodes = set()
        self.current_trxs = []  # mem-pool
        self.new_block(previous_hash=1, proof=0)  # calls a new block when blockchain instance is initialized

    def new_block(self, proof=None, previous_hash=None):
        # creates a new block
        block = {
            "index": len(self.chain) + 1,  # new_block index
            "timestamp": time(),  # epoch time > Unix time > seconds that have elapsed since 00:00:00 UTC
            "trxs": self.current_trxs,  # takes out transactions from mem-pool
            "proof": proof,
            "previous_hash": previous_hash or self.hash(self.chain[-1])
            # hashes the last block (hash pointer to the last block)
            # there is no previous block for the Genesis block
        }
        self.current_trxs = []  # flushes everything from the mem-pool
        self.chain.append(block)  # adds the above block to the actual chain
        return block

    def new_trx(self, sender, recipient, amount):
        # adds a new trx tp the mem-pool
        self.current_trxs.append({"sender": sender, "recipient": recipient,
                                  "amount": amount})
        return self.last_block["index"] + 1

    @staticmethod  # decorator which defines that function can only be used locally
    def hash(block):
        # hashes given block
        # converts python object to json object, sort_key sorts alphabetically,Strings must be encoded before hashing
        block_string = json.dumps(block, sort_keys=True).encode()
        return hashlib.sha512(block_string).hexdigest()

    @property  # decorator which defines that function can be called as a variable not a function
    def last_block(self):
        # returns the last block
        return self.chain[-1]

    @staticmethod
    def valid_proof(last_proof, proof):
        # checks whether the proof is fine or not something like NONCE in bitcoin network
        this_proof = f"{proof}{last_proof}".encode()
        this_proof_hash = hashlib.sha512(this_proof).hexdigest()
        return this_proof_hash[:4] == "0000"

    def register_node(self, address):
        # adds a new node to the bc
        parsed_url = urlparse(address)  # divides url address into smaller parts
        self.nodes.add(parsed_url.netloc)  # extracts socket

    def valid_chain(self, chain):
        # checks if the chain is valid
        last_block = chain[0]
        current_index = 0
        while chain["index"] < len(chain):
            block = chain["index"]
            current_index = chain["index"]
            if block["previous_hash"] != self.hash(last_block):
                return False
            if not self.valid_proof(last_block["proof"], block["proof"]):
                return False
            last_block = block
            current_index += 1
        return True

    def resolve_conflicts(self):
        # checks all nodes and selects the longest chain
        neighbours = self.nodes
        new_chain = None
        max_length = len(self.chain)
        for node in neighbours:
            response = requests.get(f"http://{node}/chain")
            if response.status_code == 200:
                length = response.json()["length"]
                chain = response.json()["chain"]
                if length > max_length and self.valid_chain(chain):
                    max_length = length
                    new_chain = chain

        if new_chain:
            self.chain = new_chain
            return True
        return False

    def proof_of_work(self, last_proof):
        # PoW mechanism shows that the work is done
        proof = 0
        while self.valid_proof(last_proof, proof) is False:
            proof += 1
        return proof


app = Flask(__name__)  # creates an app in flask micro framework

node_id = str(uuid4())  # generates a random unique id for this node due to networking purposes

blockchain = blockchain()  # initiates an instance from blockchain class


# defines an endpoint (flask app) to the function  # default method being used (get) > it can only receive data
@app.route("/mine")
def mine():
    # this will mine and add one block to the chain
    last_block = blockchain.last_block
    last_proof = last_block["proof"]
    proof = blockchain.proof_of_work(last_proof)
    blockchain.new_trx(sender="0", recipient=node_id, amount=50)
    previous_hash = blockchain.hash(last_block)
    block = blockchain.new_block(proof, previous_hash)
    res = {"message": "new block added",
           "index": block["index"],
           "trxs": block["trxs"],
           "proof": block["proof"],
           "previous_hash": block["previous_hash"]}
    return jsonify(res), 200


# writing Placeholders or Boilerplate > is any written text that can be
# reused in new contexts or applications without significant changes to the original.

@app.route("/trxs/new", methods=["POST"])  # this method sends data
def new_trx():
    # it will add a new trx by getting sender, recipient, amount
    values = request.get_json()
    this_block = blockchain.new_trx(values["sender"], values["recipient"], values["amount"])
    res = {"message": f"will be added to the block {this_block}"}
    return jsonify(res), 201  # http_cats  > showing error messages > standard http responds


@app.route("/chain")
def full_chain():
    # inquiries the blockchain information
    res = {
        "full_chain": blockchain.chain,
        "length": len(blockchain.chain)
    }
    return jsonify(res), 200  # returns in json format, code 200 is indicator that the program has worked properly

@app.route("/nodes/register", methods=["POST"])
def register_nodes():
    values = request.get_json()
    nodes = values["nodes"]
    if nodes not in blockchain.nodes:
        blockchain.register_node(address=nodes)
    res = {"message": "new node added",
            "total_nodes":list(blockchain.nodes)}
    return jsonify(res), 200

@app.route("/nodes/resolve")
def consensus():
    replaced = blockchain.resolve_conflicts()
    if replaced:
        res = {"message": "chain replaced",
                "new_chain": blockchain.chain} 
    else:
        res = {"message": "Im the longest chain",
                "chain": blockchain.chain}
    return jsonify(res), 200


if __name__ == "__main__":
    # allows the app to work on any node in the network and multiple ports, first argument is port number
    app.run(host="0.0.0.0", port=sys.argv[1])


